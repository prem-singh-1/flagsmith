name: API Deploy to Staging ECS

on:
    push:
        branches:
            - main
        paths:
            - "api/**"
            - ".github/**"
            - 'infrastructure/aws/staging/**'

env:
    AWS_ACCESS_KEY_ID: AKIAUM26IRCPASKFW2X5
    ECS_CLUSTER: flagsmith-api-cluster-eu-west-2-f241261
    ECS_CLUSTER_ARN: arn:aws:ecs:eu-west-2:302456015006:cluster/flagsmith-api-cluster-eu-west-2-f241261
    ECS_SERVICE: flagsmith-svc-eu-west-2-8bb18de
    VPC_SUBNET: subnet-1b0b8861
    ECS_SECURITY_GROUP: sg-08632d6fb4cb0fdf3
    ECR_REPOSITORY: 302456015006.dkr.ecr.eu-west-2.amazonaws.com/flagsmith-ecr-d247ba2
    IDENTITY_MIGRATION_EVENT_BUS: identity_migration-fb41b5d
    IDENTITY_MIGRATION_EVENT_BUS_RULE: identity_migration-08330ed
    IDENTITY_MIGRATION_TASK_ROLE: arn:aws:iam::302456015006:role/task-exec-role-5512471

jobs:
    deploy-staging-ecs:
        runs-on: ubuntu-latest
        name: API Deploy to Staging ECS
        environment: staging

        steps:
            - name: Cloning repo
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-2

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  cd api
                  docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
                  docker push $ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"

            - name: Fill in the new image ID in the Amazon ECS API task definition
              id: task-def-api
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: infrastructure/aws/staging/ecs-task-definition-web.json
                  container-name: flagsmith-api
                  image: ${{ steps.build-image.outputs.image }}

            # This is used in both the SQL migrations and the Dynamo Identity Migrations
            - name: Fill in the new image ID in the Amazon ECS migration task definition
              id: task-def-migration
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: infrastructure/aws/staging/ecs-task-definition-migration.json
                  container-name: flagsmith-api-migration
                  image: ${{ steps.build-image.outputs.image }}

            - name: Register and perform SQL schema migration
              id: register-migrate-task
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: "eu-west-2"
                  TASK_DEFINITION: ${{ steps.task-def-migration.outputs.task-definition }}
              run: |
                  echo "::set-output name=task_definition_arn::$(aws ecs register-task-definition --cli-input-json file://$TASK_DEFINITION | jq '.taskDefinition.taskDefinitionArn')"
                  aws ecs run-task --cluster ${{ env.ECS_CLUSTER }} --count 1 --launch-type FARGATE --task-definition flagsmith-api-migration  --network-configuration '{
                    "awsvpcConfiguration": {
                      "subnets": ["${{ env.VPC_SUBNET }}"],
                      "securityGroups": ["${{ env.ECS_SECURITY_GROUP }}"],
                      "assignPublicIp": "ENABLED"
                    }}'

            - name: Deploy Amazon ECS web task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  cluster: ${{ env.ECS_CLUSTER }}
                  service: ${{ env.ECS_SERVICE }}
                  task-definition: ${{ steps.task-def-api.outputs.task-definition }}

            # The DynamoDB Identity Migrator uses the same task definition as the SQL schema migrator but overrides the container definition
            # with the new django execute target
            - name: Update identity migrate rule with target
              run: |
                aws events put-targets --event-bus-name ${{ env.IDENTITY_MIGRATION_EVENT_BUS }} --rule ${{ env.IDENTITY_MIGRATION_EVENT_BUS_RULE }} --targets '[{
                "Id": "identity_migrate_rule_target",
                "Arn": "${{env.ECS_CLUSTER_ARN}}",
                "RoleArn": "${{ env.IDENTITY_MIGRATION_TASK_ROLE }}",
                "EcsParameters": {
                  "TaskDefinitionArn": ${{ steps.register-migrate-task.outputs.task_definition_arn }},
                  "TaskCount": 1,
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "awsvpcConfiguration": {
                      "Subnets": ["${{ env.VPC_SUBNET }}"],
                      "SecurityGroups": ["${{ env.ECS_SECURITY_GROUP }}"],
                    "AssignPublicIp": "ENABLED"
                    }
                    },
                    "PlatformVersion": "1.4.0",
                    "CapacityProviderStrategy": [],
                    "EnableECSManagedTags": true,
                    "EnableExecuteCommand": true,
                    "PlacementConstraints": [],
                    "PlacementStrategy": [],
                    "Tags": []
                    },
                    "RetryPolicy": {
                      "MaximumRetryAttempts": 1,
                      "MaximumEventAgeInSeconds": 3600
                      },
                      "InputTransformer": {
                        "InputPathsMap":{"project_id":"$.detail.project_id"},
                        "InputTemplate": "{ \"containerOverrides\": [ { \"name\": \"flagsmith-api-migration\", \"command\": [\"migrate_identities\", <project_id>], \" environment \":[{\"PROJECT_METADATA_TABLE_NAME_DYNAMO\":\"flagsmith_project_metadata\"}]}]}"
                        }
                        }
                        ]'

#    run-tests:
#        runs-on: ubuntu-latest
#        name: Run E2E Tests
#        environment: staging
#        needs: deploy-staging-ecs
#
#        steps:
#            - name: Cloning repo
#              uses: actions/checkout@v2
#              with:
#                  fetch-depth: 0
#
#            - name: Test with Chromedriver
#              working-directory: frontend
#              env:
#                  E2E_TEST_TOKEN_STAGING: ${{ secrets.E2E_TEST_TOKEN }}
#                  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
#                  STATIC_ASSET_CDN_URL: /
#              run: |
#                  wget -q https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_96.0.4664.110-1_amd64.deb
#                  sudo apt install --allow-downgrades -y ./google-chrome*.deb -f
#                  google-chrome --version
#                  node -v
#                  npm i
#                  export ENV=staging;
#                  npm run env
#                  npm run test
#
